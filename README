
--------------------------------------------------------------
DIMPLE: The Dynamic Interactive Musically PhysicaL Environment
--------------------------------------------------------------

DIMPLE is a program which allows you to construct physical
environments using OpenSoundControl messages.  This means that you
create 3D objects and allow them to interact with each other,
colliding or otherwise connected to each other, and then retrive
information about them, such as position, velocity, and acceleration.
This data can then be used as the basis for sound synthesis, for
example, or anything else you can think of!

The physical environment can be touched and manipulated using a hand
controller haptic device, meaning that you can use this to set up
experiments for haptics research, or to create touchable interfaces
for music.

It can be used with any software that supports OpenSoundControl.  This
includes PureData, as well as Cycling 74's Max/MSP, or even the
non-graphical Chuck audio language.

This release, version 0.0.1 alpha, is _very_ young, so I don't claim
that it will even compile for you, let alone run.  If there was a
letter in the greek alphabet before alpha, it would describe this
version better. In any case, if you're not scared off yet, please try
it!  It's been developed on Linux, but also works on OS X and Windows.
(The latter is important for haptic devices that unfortunately only
provide Windows drivers.)

-----------
   Using
-----------

This will be a brief overview of messages that DIMPLE can receive
and send.  Better documentation will be included in a later version.

To run DIMPLE after it has been compiled, simply execute it, like so:

./dimple

You will be greated by a short message, and then it will wait for OSC
messages on port 7770.  If at any time it is instructed to send
messages, it will also send them to localhost, on port 7771.  (This
will not be hardcoded in future versions.)

Firstly, open the GLUT window by telling DIMPLE to enable graphics:

/graphics/enable 1

You should see a window open with a single sphere in the center.  This
sphere is the haptic proxy, which represents the location of the hand
controller's handle.  If you don't have a hand controller, simply
ignore it.  If you do have one, you can also enable haptics in a
similar fashion:

/haptics/enable 1

At this time, we can create sphere and prism objects, with the following
messages:

/object/sphere/create <name> <x> <y> <z>
/object/prism/create <name> <x> <y> <z>

You can then change the object's parameters, such as size and mass, or
give it some force, for example, by refering to it thusly:

/object/<name>/radius <radius>                   (for a sphere)
/object/<name>/size <width> <height> <depth>     (for a prism)

Please see the included "test.pd" file (a PureData patch) for more
examples.

---------
Compiling
---------

First, execute "bootstrap.sh", like so:

./bootstrap.sh

On Windows, this must be done under the Cygwin environment.  The
bootstrap script downloads & compiles libraries upon which DIMPLE
depends.

If this is successful, continue on with compiling DIMPLE.  Otherwise,
you'll have to manually make sure the dependancies compile correctly.
I recommend compiling only the static version of these libraries, so
that all required code gets linked right into DIMPLE.

Compile DIMPLE with make:

make


If all goes well, you should now have an executable called "dimple",
which you can execute like so:

./dimple


---------
Questions
---------

Please be aware that this release is just chock full of known bugs,
missing features, etc.  It will likely change quite a lot before a 0.1
release.  However, if you have questions or comments, try me at:

sinclair@music.mcgill.ca

DIMPLE's website is currently located at:
http://www.music.mcgill.ca/~sinclair/content/dimple

