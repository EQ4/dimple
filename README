
DIMPLE: The Dynamic Interactive Musically PhysicaL Environment
==============================================================

DIMPLE is a program which allows you to construct physical
environments using OpenSoundControl messages.  This means that you
create 3D objects and allow them to interact with each other,
colliding or otherwise connected to each other, and then retrive
information about them, such as position, velocity, and acceleration.
This data can then be used as the basis for sound synthesis, for
example, or anything else you can think of!

The physical environment can be touched and manipulated using a hand
controller haptic device, meaning that you can use this to set up
experiments for haptics research, or to create touchable interfaces
for music.

It can be used with any software that supports OpenSoundControl.  This
includes PureData, as well as Cycling 74's Max/MSP, or even the
non-graphical Chuck audio language.

This alpha release is very young, so I don't claim that it will even
compile for you, let alone run.  If there was a letter in the greek
alphabet before alpha, it would describe this version better. In any
case, if you're not scared off yet, please try it!  It's been
developed on Linux, but also works on OS X and Windows.  (The latter
is important for haptic devices that unfortunately only provide
Windows drivers.)

image:./icon/dimple_sphere.png["DIMPLE logo"]

Using
-----

This will be a brief overview of messages that DIMPLE can receive
and send.  Better documentation will be included in a later version.

To run DIMPLE after it has been compiled, simply execute it, like so:

  ./dimple

You will be greated by a short message, and then it will wait for OSC
messages on port 7770.  If at any time it is instructed to send
messages, it will also send them to localhost, on port 7771.  (This
will not be hardcoded in future versions.)

Now run PureData and load the included example file, `test.pd`.
You'll need version 0.40-1, as well as the following externals from
the extended build: `sendOSC`, `dumpOSC`, `OSCroute`, and
`makesymbol`.

NOTE: Unfortunately at the moment there is no extended build for 0.40
available, so you'll have to make sure you have these externals
working.  If you get errors when loading `test.pd`, you may have trouble
running the demo.

Clicking on the bang in front of 'Initialize' should cause the GLUT
window to open.  You should see a yellow sphere in the center, which
represents the haptic proxy.  If you have a haptic device connected to
your computer, you should be able to move it around with the
controller.

Try some of the other bangs for some examples of scenes you can create.

Included demos:

* 'Force Stick', a single prism which is constrained by a hinge.
  Pushing on it will modulate the frequency of a sinusoid in Pd.

* 'Marble Box', a box which you can fill with marbles.  First click
  the bang to create the box, then give the world some gravity
  and create some marbles by moving the designated number box.
  You can move the marbles around with the haptic device, and
  when they collide, Pd plays a decaying sinusoid.

* 'Smash', a small test for the collision routines, causes three spheres
  to fly at each other and hit.


OSC Methods
-----------

Graphics and haptics can be enabled respectively by:

  /graphics/enable 1
  /haptics/enable 1

We can create sphere and prism objects:

  /object/sphere/create <name> <x> <y> <z>
  /object/prism/create <name> <x> <y> <z>

You can then change the object's parameters, such as size and mass, or
give it some force, for example:

  /object/<name>/radius <radius>                   (for a sphere)
  /object/<name>/size <width> <height> <depth>     (for a prism)

  /object/<name>/force <x> <y> <z>                 (any object)

More information can be found in the full documentation.


Compiling
---------

First, execute "bootstrap.sh", like so:

  ./bootstrap.sh

On Windows, this must be done under the Cygwin environment.  The
bootstrap script downloads & compiles libraries upon which DIMPLE
depends.  It also patches them in certain ways when it is necessary.

If this is successful, continue on with compiling DIMPLE.  Otherwise,
you'll have to manually make sure the dependancies compile correctly.
I recommend compiling only the static version of these libraries, so
that all required code gets linked right into DIMPLE.

Compile DIMPLE with make:

  make


If all goes well, you should now have an executable called "dimple",
which you can execute like so:

  ./dimple

(On Windows, the compilation currently depends on Visual Studio 2003.
Work is in progress to port to MingW and Visual Studio 2005 Express.)


Questions
---------

Please be aware that this release is just chock full of known bugs,
missing features, etc.  It will likely change quite a lot before a 0.1
release.  However, if you have questions or comments, try me at:

mailto:sinclair@music.mcgill.ca[]

DIMPLE's website is currently located at:
http://www.music.mcgill.ca/~sinclair/content/dimple[]
