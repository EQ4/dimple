diff --git a/cygwin/Makefile b/cygwin/Makefile
index 7de2bbc..69abcc8 100644
--- a/cygwin/Makefile
+++ b/cygwin/Makefile
@@ -13,6 +13,7 @@ SOURCES = $(OBJECTS:.o=.cpp)
 INCLUDE = -I../src/graphics -I../src/collisions -I../src/devices -I../src/display -I../src/files -I../src/forces -I../src/math -I../src/scenegraph -I../src/timers -I../src/tools -I../src/widgets  
 
 LOCALOBJS = $(notdir $(OBJECTS) )
+LOCALSRCS = $(notdir $(SOURCES) )
 
 # Optionally add -D_DISABLE_PHANTOM_SUPPORT to compile away SensAble's libraries
 DEFS = -D_POSIX -D_MAX_PATH=260 -D_WIN32 -DNOMINMAX
@@ -24,13 +25,16 @@ AR   = ar rc
 RANLIB = ranlib
 LIBS = -L. -L../../../lib/cygwin -lglut32 -lopengl32 -lglu32 
 
-all: chai3d
+all: localsrc chai3d
+
+localsrc: $(SOURCES)
+	for i in $+; do if ! [ -h $$(basename $$i) ]; then ln -s $$i .; fi; done
 
 %.o: %.cpp 
 	$(CC) $(CFLAGS) $<
   
 # Actual target and dependencies
-chai3d: $(OBJECTS)
+chai3d: $(LOCALOBJS)
 	$(AR) libchai3d_cygwin.a $(LOCALOBJS) 
 	$(RANLIB) libchai3d_cygwin.a
 	mv libchai3d_cygwin.a ../lib/cygwin
diff --git a/examples/linux/Makefile b/examples/linux/Makefile
new file mode 100644
index 0000000..bdae471
--- /dev/null
+++ b/examples/linux/Makefile
@@ -0,0 +1,17 @@
+
+.PHONY: all clean
+all: ../../bin/earth_linux ../../bin/reflections_linux ../../bin/viewmesh_linux ../../lib/linux/libchai3d_linux.a
+
+../../bin/earth_linux: ../bcpp6/earth/main.cpp
+	$(MAKE) -C earth
+
+../../bin/reflections_linux: ../bcpp6/reflections/main.cpp
+	$(MAKE) -C reflections
+
+../../bin/viewmesh_linux: ../cygwin/viewmesh/main.cpp
+	$(MAKE) -C viewmesh
+
+clean:
+	$(MAKE) -C earth clean
+	$(MAKE) -C reflections clean
+	$(MAKE) -C viewmesh clean
diff --git a/lib/mingw/force_directory_import b/lib/mingw/force_directory_import
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/lib/mingw/force_directory_import
@@ -0,0 +1 @@
+
diff --git a/linux/Makefile b/linux/Makefile
index cb7718c..461a31a 100644
--- a/linux/Makefile
+++ b/linux/Makefile
@@ -26,32 +26,39 @@ OBJECTS = ../src/collisions/CCollisionAABB.o ../src/collisions/CCollisionAABBTre
 ../src/scenegraph/CShapeTorus.o ../src/scenegraph/CWorld.o ../src/timers/CPrecisionClock.o ../src/timers/CPrecisionTimer.o \
 ../src/tools/CGeneric3dofPointer.o ../src/tools/CGenericTool.o ../src/tools/CMeta3dofPointer.o ../src/tools/CPhantom3dofPointer.o \
 ../src/tools/CDelta3dofPointer.o ../src/widgets/CBitmap.o ../src/widgets/CFont.o ../src/widgets/CLabelPanel.o \
-../src/widgets/CPanel.o ../src/devices/PhantomDriverLinux.o ../src/devices/CDeltaDevices.o
+../src/widgets/CPanel.o ../src/devices/PhantomDriverLinux.o ../src/devices/CDeltaDevices.o ../src/tools/CFreedom6S3dofPointer.o \
+../src/devices/CFreedom6SDevice.o 
 
 SOURCES = $(OBJECTS:.o=.cpp)
 INCLUDE = -I../src/graphics -I../src/collisions -I../src/devices -I../src/display -I../src/files -I../src/forces -I../src/math -I../src/scenegraph -I../src/timers -I../src/tools -I../src/widgets -I../include/dhd
 
 LOCALOBJS = $(notdir $(OBJECTS) )
+LOCALSRCS = $(notdir $(SOURCES) )
 
 # Optionally add -D_DISABLE_PHANTOM_SUPPORT to compile away SensAble's libraries
 # Optionally add -D_DISABLE_DELTA_SUPPORT to compile away Force Dimension's libraries
-DEFS = -D_POSIX -D_MAX_PATH=260 -D_LINUX -DLINUX -D_DISABLE_PHANTOM_SUPPORT -D_DISABLE_DELTA_SUPPORT
+# Optionally add -D_DISABLE_FALCON_DEVICE_SUPPORT to compile away Novint's libraries
+# Optionally add -D_DISABLE_FREEDOM6S_SUPPORT to compile away MPBT's Freedom 6S libraries
+DEFS = -D_POSIX -D_MAX_PATH=260 -D_LINUX -DLINUX -D_DISABLE_PHANTOM_SUPPORT -D_DISABLE_DELTA_SUPPORT -D_DISABLE_FALCON_DEVICE_SUPPORT
 
-CC   = g++ -c $(DEFS)
-CFLAGS = -O3 $(INCLUDE)
-LD   = g++ -o
+CC   = g++
+CFLAGS = -c $(DEFS) -O3 $(INCLUDE)
+LD   = g++
 AR   = ar rc
 RANLIB = ranlib
 
 LIBS = -L. -L../lib/linux -lglut -lgl -lglu -ldhd
 
-all: chai3d
+all: localsrc chai3d
+
+localsrc: $(SOURCES)
+	for i in $+; do if ! [ -h $$(basename $$i) ]; then ln -s $$i .; fi; done
 
 %.o: %.cpp 
-	$(CC) $(CFLAGS) $<
-  
+	$(CC) $(CFLAGS) $< -o $@
+
 # Actual target and dependencies
-chai3d: $(OBJECTS)
+chai3d: $(LOCALOBJS)
 	$(AR) libchai3d_linux.a $(LOCALOBJS) 
 	$(RANLIB) libchai3d_linux.a
 	mv libchai3d_linux.a ../lib/linux
diff --git a/mingw/Makefile b/mingw/Makefile
new file mode 100644
index 0000000..0480731
--- /dev/null
+++ b/mingw/Makefile
@@ -0,0 +1,47 @@
+# CHAI makefile for MingW
+# Stephen Sinclair
+# Feb. 2009
+#
+# To disable Phantom support and compile away SensAble's libraries, you need to
+# add -D_DISABLE_PHANTOM_SUPPORT to the DEFS line.  If you don't do this, the
+# SensAble runtime may be required to run your applications.
+
+OBJECTS = ../src/collisions/CCollisionAABB.o ../src/collisions/CCollisionAABBTree.o ../src/collisions/CCollisionBrute.o ../src/collisions/CCollisionSpheres.o ../src/collisions/CCollisionSpheresGeometry.o ../src/collisions/CGenericCollision.o ../src/devices/CDeltaDevices.o ../src/devices/CFreedom6SDevice.o ../src/devices/CGenericDevice.o ../src/devices/CPhantomDevices.o ../src/devices/CVirtualDevice.o ../src/files/CFileLoader3DS.o ../src/files/CFileLoaderBMP.o ../src/files/CFileLoaderOBJ.o ../src/files/CFileLoaderTGA.o ../src/files/CImageLoader.o ../src/files/CMeshLoader.o ../src/forces/CGenericPointForceAlgo.o ../src/forces/CPotentialFieldForceAlgo.o ../src/forces/CProxyPointForceAlgo.o ../src/graphics/CColor.o ../src/graphics/CDraw3D.o ../src/graphics/CMacrosGL.o ../src/graphics/CMaterial.o ../src/graphics/CShaders.o ../src/graphics/CTexture2D.o ../src/graphics/CTriangle.o ../src/graphics/CVertex.o ../src/math/CMaths.o ../src/math/CMatrix3d.o ../src/math/CString.o ../src/math/CVector3d.o ../src/scenegraph/CCamera.o ../src/scenegraph/CGenericObject.o ../src/scenegraph/CGenericPotentialField.o ../src/scenegraph/CLight.o ../src/scenegraph/CMesh.o ../src/scenegraph/CShapeSphere.o ../src/scenegraph/CShapeTorus.o ../src/scenegraph/CVBOMesh.o ../src/scenegraph/CWorld.o ../src/timers/CPrecisionClock.o ../src/timers/CPrecisionTimer.o ../src/tools/CDelta3dofPointer.o ../src/tools/CFreedom6S3dofPointer.o ../src/tools/CGeneric3dofPointer.o ../src/tools/CGenericTool.o ../src/tools/CMeta3dofPointer.o ../src/tools/CPhantom3dofPointer.o ../src/widgets/CBitmap.o ../src/widgets/CFont.o ../src/widgets/CLabelPanel.o ../src/widgets/CPanel.o ../src/devices/PhantomDriver.o ../src/devices/CFalconDevice.o
+
+SOURCES = $(OBJECTS:.o=.cpp)
+
+INCLUDE = -I/usr/include -I../src/graphics -I../src/collisions -I../src/devices -I../src/display -I../src/files -I../src/forces -I../src/math -I../src/scenegraph -I../src/timers -I../src/tools -I../src/widgets  
+
+LOCALOBJS = $(notdir $(OBJECTS) )
+LOCALSRCS = $(notdir $(SOURCES) )
+
+# Optionally add -D_DISABLE_PHANTOM_SUPPORT to compile away SensAble's libraries
+DEFS = -D_MAX_PATH=260 -D_WIN32 -D_MSYS -D_MINGW -DNOMINMAX
+
+CC   = g++ -c $(DEFS)
+CFLAGS = -O3 $(INCLUDE)
+LD   = g++ -o
+AR   = ar rc
+RANLIB = ranlib
+LIBS = -L. -L../../../lib/mingw -lglut32 -lopengl32 -lglu32 
+
+all: localsrc chai3d
+
+localsrc: $(SOURCES)
+	for i in $+; do if [ $$i -nt $$(basename $$i) ]; then cp -v $$i .; fi; done
+	$(MAKE) chai3d
+
+%.o: %.cpp 
+	$(CC) $(CFLAGS) $<
+  
+# Actual target and dependencies
+chai3d: $(LOCALOBJS)
+	$(AR) libchai3d_mingw.a $(LOCALOBJS) 
+	$(RANLIB) libchai3d_mingw.a
+	mv libchai3d_mingw.a ../lib/mingw
+	@echo "compilation done"
+
+# Target deleting unwanted files
+clean:
+	\rm -f *.o *~ libchai3d_mingw.a core 
+
diff --git a/src/collisions/CCollisionAABB.cpp b/src/collisions/CCollisionAABB.cpp
index fb07648..588564e 100644
--- a/src/collisions/CCollisionAABB.cpp
+++ b/src/collisions/CCollisionAABB.cpp
@@ -59,6 +59,15 @@ cCollisionAABB::~cCollisionAABB()
 {
 
     // clear collision tree
+
+    // do it carefully: apparently if it was allocated as a subclass,
+    // segfault here! (SS)
+    cCollisionAABBInternal* internal =
+        dynamic_cast<cCollisionAABBInternal*>(m_root);
+    if (internal)
+        delete [] internal;
+    else
+
     if (m_root != NULL) delete [] m_root;
 
     // Delete the allocated array of leaf nodes
diff --git a/src/collisions/CCollisionAABBTree.cpp b/src/collisions/CCollisionAABBTree.cpp
index 5581140..e97bb60 100644
--- a/src/collisions/CCollisionAABBTree.cpp
+++ b/src/collisions/CCollisionAABBTree.cpp
@@ -22,6 +22,7 @@
 //---------------------------------------------------------------------------
 #include "CCollisionAABBTree.h"
 //---------------------------------------------------------------------------
+#include <stdlib.h>
 
 //! Pointer for creating new AABB tree nodes, declared in CCollisionAABB.cpp.
 extern cCollisionAABBInternal* g_nextFreeNode;
diff --git a/src/collisions/CCollisionSpheres.cpp b/src/collisions/CCollisionSpheres.cpp
index b83e97e..caf9bd7 100644
--- a/src/collisions/CCollisionSpheres.cpp
+++ b/src/collisions/CCollisionSpheres.cpp
@@ -74,6 +74,15 @@ cCollisionSpheres::cCollisionSpheres(vector<cTriangle> *a_triangles,
 cCollisionSpheres::~cCollisionSpheres()
 {
     // delete array of internal nodes
+
+    // do it carefully: apparently if it was allocated as a subclass,
+    // segfault here! (SS)
+    cCollisionSpheresNode* node =
+        dynamic_cast<cCollisionSpheresNode*>(m_root);
+    if (node)
+        delete [] node;
+    else
+
     if (m_root != NULL)
         delete [] m_root;
 
diff --git a/src/devices/CFalconDevice.cpp b/src/devices/CFalconDevice.cpp
index 4e9a510..2ddb83e 100644
--- a/src/devices/CFalconDevice.cpp
+++ b/src/devices/CFalconDevice.cpp
@@ -228,7 +228,14 @@ int cFalconDevice::command(int a_command, void* a_data)
                 dhdlcUpdate();
                 dhdlcGetPosition(&x, &y, &z);
                 position->set(x, y, z);
-                position->div(m_halfSizeWorkspace);
+
+                // observed values
+                float min[3] = {-0.006215, -0.001806, -0.002424};
+                float max[3] = {0.005861, 0.007244, 0.008910};
+
+                position->x = (position->x-min[0])/(max[0]-min[0])*2-1;
+                position->y = (position->y-min[1])/(max[1]-min[1])*2-1;
+                position->z = (position->z-min[2])/(max[2]-min[2])*2-1;
             }
             break;
 
diff --git a/src/devices/CFreedom6SDevice.cpp b/src/devices/CFreedom6SDevice.cpp
index 331ae69..d3f7526 100644
--- a/src/devices/CFreedom6SDevice.cpp
+++ b/src/devices/CFreedom6SDevice.cpp
@@ -22,10 +22,17 @@
 //---------------------------------------------------------------------------
 #include "CFreedom6SDevice.h"
 //---------------------------------------------------------------------------
+#ifdef WIN32
 #include <windows.h>
-#include "CVector3D.h"
+#endif
+#include "CVector3d.h"
 //---------------------------------------------------------------------------
-
+#ifdef _POSIX
+#define HINSTANCE void*
+#define GetProcAddress dlsym
+#define FreeLibrary dlclose
+#include <dlfcn.h>
+#endif
 //---------------------------------------------------------------------------
 HINSTANCE hf6sDLL = NULL;
 
@@ -87,7 +94,11 @@ cFreedom6SDevice::cFreedom6SDevice() : cGenericDevice()
 
     if (hf6sDLL==NULL)
     {
+#ifdef _POSIX
+        hf6sDLL = dlopen("libfreedom6s.so", RTLD_LAZY);
+#else
         hf6sDLL = LoadLibrary("freedom6s.dll");
+#endif
 
         if (hf6sDLL==NULL)
             return;
@@ -234,7 +245,7 @@ int cFreedom6SDevice::command(int a_command, void* a_data)
 
     // workspace is approximately from -0.1 to 0.1 meters.
     if (a_command == CHAI_CMD_GET_POS_NORM_3D) {
-      v->div(0.1);
+      v->div(0.02);
     }
 
     // convert to mm
diff --git a/src/devices/CLibNIFalconDevice.cpp b/src/devices/CLibNIFalconDevice.cpp
new file mode 100644
index 0000000..727d529
--- /dev/null
+++ b/src/devices/CLibNIFalconDevice.cpp
@@ -0,0 +1,209 @@
+//===========================================================================
+/*
+    This file is part of the CHAI 3D visualization and haptics libraries.
+    Copyright (C) 2003-2004 by CHAI 3D. All rights reserved.
+
+    This library is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License("GPL") version 2
+    as published by the Free Software Foundation.
+
+    For using the CHAI 3D libraries with software that can not be combined
+    with the GNU GPL, and for taking advantage of the additional benefits
+    of our support services, please contact CHAI 3D about acquiring a
+    Professional Edition License.
+
+    \author:    <http://www.chai3d.org>
+    \author:    Stephen Sinclair (MPBT)
+    \version    1.0
+    \date       05/2005
+*/
+//===========================================================================
+
+//---------------------------------------------------------------------------
+#include "CLibNIFalconDevice.h"
+//---------------------------------------------------------------------------
+#ifdef WIN32
+#include <windows.h>
+#endif
+#include "CVector3d.h"
+//---------------------------------------------------------------------------
+
+//===========================================================================
+/*!
+    Constructor of cLibNIFalconDevice.
+    Loads interface DLL.
+
+    \fn     cLibNIFalconDevice::cLibNIFalconDevice()
+*/
+//===========================================================================
+cLibNIFalconDevice::cLibNIFalconDevice() : cGenericDevice()
+{
+    m_systemReady = false;
+    m_systemAvailable = false;
+
+    m_activeLibNIFalconDevices++;
+
+    m_systemAvailable = true;
+}
+
+//===========================================================================
+/*!
+    Destructor of cLibNIFalconDevice.
+
+    \fn     cLibNIFalconDevice::~cLibNIFalconDevice()
+*/
+//===========================================================================
+cLibNIFalconDevice::~cLibNIFalconDevice()
+{
+    m_activeLibNIFalconDevices--;
+}
+
+//===========================================================================
+/*!
+    Open connection to LibNIFalcon device.
+
+    \fn     int cLibNIFalconDevice::open()
+    \return Return 0 is operation succeeds, -1 if an error occurs.
+*/
+//===========================================================================
+int cLibNIFalconDevice::open()
+{
+   return 0;
+}
+
+//===========================================================================
+/*!
+    Close connection to LibNIFalcon device.
+
+    \fn     int cLibNIFalconDevice::close()
+    \return Return 0 is operation succeeds, -1 if an error occurs.
+*/
+//===========================================================================
+int cLibNIFalconDevice::close()
+{
+   return 0;
+}
+
+//===========================================================================
+/*!
+    Calibrate LibNIFalcon device. Initializes the driver, loading appropriate
+  settings according to current LibNIFalcon configuration.
+
+    \fn     int cLibNIFalconDevice::initialize(const bool a_resetEncoders=false)
+    \param  a_resetEncoders Ignored; exists for forward compatibility.
+    \return Return 0 is operation succeeds, -1 if an error occurs.
+*/
+//===========================================================================
+int cLibNIFalconDevice::initialize(const bool a_resetEncoders)
+{
+    if (m_hf6s != 0)
+        return -1;
+
+    F6SRC rc = f6s_Initialize(&m_hf6s);
+    if (m_hf6s && rc == F6SRC_NOERROR)
+    {  
+        // Joint velocity computation:
+        //   timestep = 1ms
+        //   sample buffer size = 15
+        f6s_ComputeJointVel(m_hf6s, 0.001f, 15);
+        return 0;
+    }
+
+    m_hf6s = 0;
+    return -1;
+}
+
+//===========================================================================
+/*!
+    Set command for the LibNIFalcon device
+
+    \fn     int cLibNIFalconDevice::command(int iCommand, void* iData)
+    \param  iCommand    Selected command.
+    \param  iData       Pointer to the corresponding data structure.
+    \return Return status of command.
+*/
+//===========================================================================
+int cLibNIFalconDevice::command(int a_command, void* a_data)
+{
+  if (m_hf6s==0)
+    return CHAI_MSG_SYSTEM_NOT_READY;
+
+  cVector3d *v;
+  double kinemat[16];
+  double force[3];
+  double torque[3];
+  double velLinear[3], velAngular[3];
+  torque[0] = torque[1] = torque[2] = 0;
+
+  switch (a_command)
+  {
+  case CHAI_CMD_GET_POS_3D:
+  case CHAI_CMD_GET_POS_NORM_3D:
+    f6s_UpdateKinematics(m_hf6s);
+    f6s_GetPositionMatrixGL(m_hf6s, kinemat);
+
+    // kinemat is a row-major 4x4 rotation/translation matrix
+
+    v = (cVector3d*)a_data;
+
+    v->x = kinemat[14];
+    v->y = kinemat[12];
+    v->z = kinemat[13];
+
+    // workspace is approximately from -0.1 to 0.1 meters.
+    if (a_command == CHAI_CMD_GET_POS_NORM_3D) {
+      v->div(0.02);
+    }
+
+    // convert to mm
+    else {
+      v->mul(1000.0);
+    }
+
+    break;
+
+  case CHAI_CMD_SET_FORCE_3D:
+    v = (cVector3d*)a_data;
+
+    // coordinates need to be changed for the LibNIFalcon API
+    // torque is assumed to be zero
+
+    force[0] = v->y;
+    force[1] = -v->x;
+    force[2] = v->z;
+    f6s_SetForceTorque(m_hf6s, force, torque);
+
+    break;
+
+  case CHAI_CMD_GET_VEL_3D:
+    f6s_GetVelocityGL(m_hf6s, velLinear, velAngular);
+
+    v = (cVector3d*)a_data;
+    v->x = velLinear[2];
+    v->y = velLinear[0];
+    v->z = velLinear[1];
+
+    // Now convert from m/s to mm/s
+    v->mul(1000.0);
+
+    break;
+
+  // read scale factor from normalized coords to mm
+  case CHAI_CMD_GET_NORMALIZED_SCALE_FACTOR:   
+    {
+    double* scale = (double*)a_data;
+
+    // Multiply .1 to get meters back
+    *scale = 0.1;
+
+    // Then multiply by 1000 to get millimeters
+    *scale *= 1000.0;
+    }
+    break;
+
+  default:
+    return CHAI_MSG_NOT_IMPLEMENTED;
+  }
+
+  return CHAI_MSG_OK;
+}
diff --git a/src/devices/CLibNIFalconDevice.h b/src/devices/CLibNIFalconDevice.h
new file mode 100644
index 0000000..49934d8
--- /dev/null
+++ b/src/devices/CLibNIFalconDevice.h
@@ -0,0 +1,62 @@
+//===========================================================================
+/*
+    This file is part of the CHAI 3D visualization and haptics libraries.
+    Copyright (C) 2003-2004 by CHAI 3D. All rights reserved.
+
+    This library is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License("GPL") version 2
+    as published by the Free Software Foundation.
+
+    For using the CHAI 3D libraries with software that can not be combined
+    with the GNU GPL, and for taking advantage of the additional benefits
+    of our support services, please contact CHAI 3D about acquiring a
+    Professional Edition License.
+
+    \author:    <http://www.chai3d.org>
+    \author:    Stephen Sinclair
+    \version    1.0
+    \date       05/2005
+*/
+//===========================================================================
+
+//---------------------------------------------------------------------------
+#ifndef CLibNIFalconDeviceH
+#define CLibNIFalconDeviceH
+//---------------------------------------------------------------------------
+#include "CGenericDevice.h"
+//---------------------------------------------------------------------------
+#include <falcon/core/FalconCore.h"
+
+//===========================================================================
+/*!
+    \file   CLibNIFalconDevice.h
+    \class  cLibNIFalconDevice
+    \brief  cLibNIFalconDevice describes an interface to the LibNIFalcon haptic
+			device from MPB Technologies Inc.
+*/
+//===========================================================================
+class cLibNIFalconDevice : public cGenericDevice
+{
+  public:
+    // CONSTRUCTOR & DESTRUCTOR:
+    //! Constructor of cLibNIFalconDevice.
+    cLibNIFalconDevice();
+    //! Destructor of cLibNIFalconDevice.
+    virtual ~cLibNIFalconDevice();
+
+    // METHODS:
+    //! Open connection to MPB device.
+    virtual int open();
+    //! Close connection to MPB device.
+    virtual int close();
+    //! Initialize MPB device.
+    virtual int initialize(const bool a_resetEncoders=false);
+    //! Set a command to the MPB device.
+    virtual int command(int a_command, void* a_data);
+
+  protected:
+};
+
+//---------------------------------------------------------------------------
+#endif
+//---------------------------------------------------------------------------
diff --git a/src/files/CFileLoader3DS.cpp b/src/files/CFileLoader3DS.cpp
index 1b93f76..82b5576 100644
--- a/src/files/CFileLoader3DS.cpp
+++ b/src/files/CFileLoader3DS.cpp
@@ -31,6 +31,8 @@
 #define _snprintf(x,y,...) sprintf(x,__VA_ARGS__) 
 #endif
 
+#include <stdlib.h>
+#include <string.h>
 #include <map>
 
 typedef std::map<unsigned int, unsigned int> uint_uint_map;
diff --git a/src/files/CFileLoaderOBJ.cpp b/src/files/CFileLoaderOBJ.cpp
index f4eef52..1fc2444 100644
--- a/src/files/CFileLoaderOBJ.cpp
+++ b/src/files/CFileLoaderOBJ.cpp
@@ -23,6 +23,7 @@
 //---------------------------------------------------------------------------
 #include "CFileLoaderOBJ.h"
 //---------------------------------------------------------------------------
+#include <string.h>
 
 bool g_objLoaderShouldGenerateExtraVertices = false;
 
diff --git a/src/files/CImageLoader.cpp b/src/files/CImageLoader.cpp
index 26a63dc..4f8f222 100644
--- a/src/files/CImageLoader.cpp
+++ b/src/files/CImageLoader.cpp
@@ -23,6 +23,10 @@
 //---------------------------------------------------------------------------
 #ifdef _WIN32
 #include <windows.h>
+#ifdef _MINGW
+#include <ocidl.h>
+#include <olectl.h>
+#endif
 #endif
 
 #include "CImageLoader.h"
@@ -30,9 +34,10 @@
 #include "CFileLoaderTGA.h"
 #include "CMacrosGL.h"
 #include <GL/gl.h>
+#include <string.h>
 //---------------------------------------------------------------------------
 
-#if (defined(_WIN32) && !defined(_POSIX) )
+#if (defined(_WIN32) && !defined(_POSIX) && !defined(_MINGW) )
 
 // Don't let the ATL headers decide for themselves which lib file to
 // link against; let us link here or in client applications...
diff --git a/src/files/CMeshLoader.cpp b/src/files/CMeshLoader.cpp
index 80851bd..cbda647 100644
--- a/src/files/CMeshLoader.cpp
+++ b/src/files/CMeshLoader.cpp
@@ -20,6 +20,7 @@
 //===========================================================================
 
 #include "CMeshLoader.h"
+#include <string.h>
 
 //===========================================================================
 /*!
diff --git a/src/math/CString.cpp b/src/math/CString.cpp
index ffcd065..e88e674 100644
--- a/src/math/CString.cpp
+++ b/src/math/CString.cpp
@@ -24,6 +24,7 @@
 #include "CString.h"
 #include "CMacrosGL.h"
 //---------------------------------------------------------------------------
+#include <stdlib.h>
 
 //===========================================================================
 /*!
diff --git a/src/scenegraph/CCamera.cpp b/src/scenegraph/CCamera.cpp
index 4a60549..35c5e54 100644
--- a/src/scenegraph/CCamera.cpp
+++ b/src/scenegraph/CCamera.cpp
@@ -25,6 +25,7 @@
 #include "CWorld.h"
 #include "CLight.h"
 //---------------------------------------------------------------------------
+#include <string.h>
 
 //===========================================================================
 /*!
diff --git a/src/scenegraph/CGenericObject.cpp b/src/scenegraph/CGenericObject.cpp
index 4c96e1b..64b3a53 100644
--- a/src/scenegraph/CGenericObject.cpp
+++ b/src/scenegraph/CGenericObject.cpp
@@ -26,6 +26,7 @@
 #include "CProxyPointForceAlgo.h"
 #include "CMesh.h"
 #include <float.h>
+#include <string.h>
 //---------------------------------------------------------------------------
 #include <vector>
 //---------------------------------------------------------------------------
diff --git a/src/scenegraph/CGenericObject.h b/src/scenegraph/CGenericObject.h
index daa2620..bf26228 100644
--- a/src/scenegraph/CGenericObject.h
+++ b/src/scenegraph/CGenericObject.h
@@ -78,15 +78,11 @@ typedef enum {
                   operations propagate through the scene graph.
 */
 //===========================================================================
-#ifdef _MSVC
-class cGenericObject
-#else
-#ifdef _POSIX
+#if defined(_MSVC) || defined(_POSIX) || defined(_MINGW)
 class cGenericObject
 #else
 class __rtti cGenericObject
 #endif
-#endif
 {    
 
   public:
diff --git a/src/scenegraph/CWorld.cpp b/src/scenegraph/CWorld.cpp
index 1fac70e..fe68872 100644
--- a/src/scenegraph/CWorld.cpp
+++ b/src/scenegraph/CWorld.cpp
@@ -23,6 +23,7 @@
 #include "CWorld.h"
 #include "CLight.h"
 //---------------------------------------------------------------------------
+#include <string.h>
 
 #ifndef _MSVC
 #include <float.h>
diff --git a/src/timers/CPrecisionTimer.cpp b/src/timers/CPrecisionTimer.cpp
index 7863b02..efc15a7 100644
--- a/src/timers/CPrecisionTimer.cpp
+++ b/src/timers/CPrecisionTimer.cpp
@@ -143,7 +143,7 @@ void *timer_thread_func(void *cptimer)
       double start_time = clock.getCPUtime();
 
       // Run the user's callback
-      internal_timer_callback(0,0,(DWORD)(cpt),0,0);
+      internal_timer_callback(cpt);
 
       // Found out how much time we have left
       double end_time = clock.getCPUtime();
@@ -401,7 +401,7 @@ bool cPrecisionTimer::stop()
 #ifdef _WIN32
 void CALLBACK internal_timer_callback(UINT uTimerID, UINT uMsg, DWORD dwUser, DWORD dw1, DWORD dw2)
 #else
-void internal_timer_callback(UINT uTimerID, UINT uMsg, DWORD dwUser, DWORD dw1, DWORD dw2)
+void internal_timer_callback(cPrecisionTimer* dwUser)
 #endif
 {
     cPrecisionTimer* timer = (cPrecisionTimer*)(dwUser);
diff --git a/src/timers/CPrecisionTimer.h b/src/timers/CPrecisionTimer.h
index c5e498a..3fe8c27 100644
--- a/src/timers/CPrecisionTimer.h
+++ b/src/timers/CPrecisionTimer.h
@@ -66,9 +66,8 @@ void CALLBACK internal_timer_callback(UINT uTimerID, UINT uMsg, DWORD dwUser, DW
 
 #else
 
-typedef unsigned int UINT;
-typedef unsigned int DWORD;
-void internal_timer_callback(UINT uTimerID, UINT uMsg, DWORD dwUser, DWORD dw1, DWORD dw2);
+class cPrecisionTimer;
+void internal_timer_callback(cPrecisionTimer* cpt);
 
 #endif
 
@@ -174,7 +173,7 @@ class cPrecisionTimer
 #ifdef _WIN32
   friend void CALLBACK internal_timer_callback(UINT uTimerID, UINT uMsg, DWORD dwUser, DWORD dw1, DWORD dw2);
 #else
-  friend void internal_timer_callback(UINT uTimerID, UINT uMsg, DWORD dwUser, DWORD dw1, DWORD dw2);
+  friend void internal_timer_callback(cPrecisionTimer *cpt);
 #endif
 
 #ifdef _POSIX
diff --git a/src/tools/CMeta3dofPointer.cpp b/src/tools/CMeta3dofPointer.cpp
index 2caef40..5e0d7e4 100644
--- a/src/tools/CMeta3dofPointer.cpp
+++ b/src/tools/CMeta3dofPointer.cpp
@@ -117,7 +117,7 @@ cMeta3dofPointer::cMeta3dofPointer(cWorld* a_world, unsigned int a_deviceNumber,
 
     // No linux support yet for the virtual device or the f6s...
 
-#ifdef _WIN32
+#ifndef _DISABLE_FREEDOM6S_SUPPORT
 
     // try to open Freedom6S device
     m_device = new cFreedom6SDevice();
@@ -134,7 +134,6 @@ cMeta3dofPointer::cMeta3dofPointer(cWorld* a_world, unsigned int a_deviceNumber,
       delete m_device;
       m_device = NULL;
     }
-
 #endif
 
 // No Linux virtual device yet...
diff --git a/src/tools/CMeta3dofPointer.h b/src/tools/CMeta3dofPointer.h
index e52f609..2eccda6 100644
--- a/src/tools/CMeta3dofPointer.h
+++ b/src/tools/CMeta3dofPointer.h
@@ -27,10 +27,10 @@
 #include "CPhantomDevices.h"
 #include "CDeltaDevices.h"
 #include "CFalconDevice.h"
+#include "CFreedom6S3dofPointer.h"
 
 #ifdef _WIN32
 #include "CVirtualDevice.h"
-#include "CFreedom6S3dofPointer.h"
 #endif
 
 //---------------------------------------------------------------------------
