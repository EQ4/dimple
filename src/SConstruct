
import sys, os

def getoutput(cmd):
    w, r = os.popen4(cmd)
    result = r.read()
    r.close()
    w.close()
    return result.strip()

uname = getoutput('uname')

# Read environment variables & arguments
env = Environment(ENV = os.environ)

# Force preference for mingw
Tool('mingw')(env)

# Command-line takes precedence, but environment can specify debug as well
try:
    if ARGUMENTS.has_key('debug'):
        debug = int(ARGUMENTS.get('debug',0))==1
    else:
        debug = int(env['ENV'].get('DIMPLE_DEBUG',0))==1
except:
    debug = False

# Start configuration
conf = Configure(env)

# Get current DIMPLE version
VERSION = getoutput(['sh','../util/version.sh'])
env.Append(CPPDEFINES = [('DIMPLE_VERSION', '\\"'+VERSION+'\\"')])

# Check if libsamplerate is installed, or if it's bootstrapped here.
if not conf.CheckLibWithHeader('samplerate', 'samplerate.h', 'C'):
    env.Append(CPPPATH=['../libdeps/libsamplerate-0.1.2/src'],
               LIBPATH=['../libdeps/libsamplerate-0.1.2/src/.libs'])
    if not conf.CheckLibWithHeader('samplerate', 'samplerate.h', 'C'):
        print 'libsamplerate not found.'
        env.Exit(-1)

### CHAI 3D ###
env.Append(CPPDEFINES = ['_POSIX', 'LINUX', '_LINUX',
                         ('_MAX_PATH','260')])                  
# Platform dependant library names
if 'linux' in sys.platform:
	env.Append(LIBS = ['chai3d_linux', 'dhd', 'usb', 'pciscan'],
               LIBPATH = ['../libdeps/chai3d/lib/linux'])
elif 'darwin' in sys.platform:
	env.Append(LIBS = ['chai3d_darwin'],
               LIBPATH = ['../libdeps/chai3d/lib/darwin'])
if 'MINGW' in uname:
	env.Append(LIBS = ['chai3d_cygwin'],
               LIBPATH = ['../libdeps/chai3d/lib/cygwin'])

### LibLo ###

# Link to the library using -l option,
env.Append(LIBPATH = ['../libdeps/liblo-0.24/src/.libs'], LIBS = ['lo'])

if 'win32' in sys.platform:
    env.Append(LIBS = ['wsock32'])

# Check for GL headers
if conf.CheckHeader('/System/Library/Frameworks/OpenGL.framework/Headers/gl.h'):
    env.Append(CPPPATH=['../libdeps/chai3d/darwin/GL'],
               LINKFLAGS=['-framework','OpenGL'])
elif conf.CheckHeader('/mingw/include/GL/gl.h'):
    env.Append(LIBS=['opengl32', 'glu32'])
elif conf.CheckHeader('c:/MSYS/MingW/include/GL/gl.h'):
    env.Append(CPPPATH=['c:/MSYS/MingW/include'], LIBS=['opengl32', 'glu32'])
elif not conf.CheckHeader('/usr/include/GL/gl.h'):
    print "Coudln't find OpenGL header (GL/gl.h)."
    sys.exit(1)

# Check for GLUT headers
if conf.CheckHeader('/System/Library/Frameworks/GLUT.framework/Headers/glut.h'):
    env.Append(CPPPATH=['../libdeps/chai3d/darwin/GLUT'],
               LINKFLAGS=['-framework','GLUT'])
else:
    if conf.CheckHeader('/mingw/include/GL/glut.h'):
        env.Append(CPPPATH=['/mingw/include'], LIBS=['glut'])
    elif conf.CheckHeader('../libdeps/freeglut-2.4.0/include/GL/glut.h'):
        env.Append(CPPPATH=['../libdeps/freeglut-2.4.0/include'],
                   LIBS=['glut'])
    elif conf.CheckHeader('c:/MSYS/MingW/include/GL/glut.h'):
        env.Append(CPPPATH=['c:/MSYS/MingW/include'],
                   LIBS=['glut'])
    elif not conf.CheckHeader('/usr/include/GL/glut.h'):
        print "Couldn't find GLUT header (GL/glut.h)."
        sys.exit(1)

    # Using FreeGLUT on all platforms except Mac OS X.
    env.Append(CPPDEFINES = ['USE_FREEGLUT'],
               LIBS = ['glut'])

# MingW requires pointing to the pthreads library, and extra Windows libraries.
if 'MINGW' in uname:
    env.Append(CPPPATH=['../libdeps/pthreads-w32-2-8-0-release'],
               LIBPATH=['../libdeps/pthreads-w32-2-8-0-release'],
               CPPFLAGS=['-DWIN32','-DPTW32_STATIC_LIB','-DFREEGLUT_STATIC'],
               LIBS=['opengl32','glu32','pthread','wsock32','ws2_32','winmm',
                     'gdi32'])

""" Note:, this works for linking under MingW:

g++ -o dimple.exe CODEMesh.o CODEPotentialProxy.o CODEPrimitive.o CODEPrism.o 
CODESphere.o OscObject.o ValueTimer.o AudioStreamer.o dimple.o OscBase.o Simulat
ion.o PhysicsSim.o HapticsSim.o VisualSim.o InterfaceSim.o -LC:\\Docume~1\\sincl
airs\\MyDocu~1\\projects\\dimple\\libdeps\\libsamplerate-0.1.2\\src\\.libs -LC:\
\Docume~1\\sinclairs\\MyDocu~1\\projects\\dimple\\libdeps\\pthreads-w32-2-8-0-re
lease -LC:\\Docume~1\\sinclairs\\MyDocu~1\\projects\\dimple\\libdeps\\chai3d\\li
b\\cygwin -LC:\\Docume~1\\sinclairs\\MyDocu~1\\projects\\dimple\\libdeps\\liblo-
0.24\\src\\.libs -LC:\\Docume~1\\sinclairs\\MyDocu~1\\projects\\dimple\\libdeps\
\ode-0.7\\ode\\src -lsamplerate -lchai3d_cygwin -llo -lode -lpthread -lglut -lop
engl32 -lglu32 -lwsock32 -lws2_32 -lpthread -lwinmm -lgdi32
"""

nv = conf.Finish()

### Debug mode ###
if debug:
	env.Append(CPPFLAGS = ['-ggdb','-Wall'])
	env.Append(CPPDEFINES = [('DEBUG','1')])
else:
	env.Append(CPPFLAGS = ['-O3'])

### Libraries which link the same on all systems ###
env.Append(
    CPPPATH = ['../libdeps/ode-0.7/include',
               '../libdeps/chai3d/include',
               '../libdeps/liblo-0.24'],
    LIBPATH = ['../libdeps/ode-0.7/ode/src'],
    LIBS = ['ode', 'pthread']
    )

### Compile the program ###
env.Program( target = 'dimple',
    source = ['CODEMesh.cpp',
              'CODEPotentialProxy.cpp',
              'CODEPrimitive.cpp',
              'CODEPrism.cpp',
              'CODESphere.cpp',
              'OscObject.cpp',
              'OscValue.cpp',
              'ValueTimer.cpp',
              'AudioStreamer.cpp',
              'dimple.cpp',
              'OscBase.cpp',
              'Simulation.cpp',
              'PhysicsSim.cpp',
              'HapticsSim.cpp',
              'VisualSim.cpp',
              'InterfaceSim.cpp']
	)
